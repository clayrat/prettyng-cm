------------------------------------------------------------------------
-- This module is based on Jean-Philippe Bernardy's functional pearl
-- "A Pretty But Not Greedy Printer"
------------------------------------------------------------------------

module Text.Pretty.Core where

open import Foundations.Prelude

open import Data.Unit
open import Data.Bool
open import Data.List
open import Data.List.Operations.Properties
open import Data.Nat
open import Data.Nat.Order.Base
open import Data.Maybe as Maybe
open import Data.Maybe.Correspondences.Unary.All as All·¥π
open import Data.String
open import Data.String.Properties.Unsafe

open import Order.Constructions.Minmax
open import Order.Constructions.Nat
open import Order.Diagram.Join
import Order.Diagram.Join.Reasoning as JR
open decminmax ‚Ñï-dec-total
open JR ‚Ñï‚Çö max-joins

open import Data.Refinement
open import Data.Tree.Binary.NL
open import Data.Tree.Binary.NL.All as All·µÄ
open import Data.Tree.Binary.NL.Properties

{-
import Level

open import Data.Bool.Base using (Bool)
open import Data.Irrelevant as Irrelevant using (Irrelevant) hiding (module Irrelevant)
open import Data.List.Base as List   using (List; []; _‚à∑_)
open import Data.Nat.Base            using (‚Ñï; zero; suc; _+_; _‚äî_; _‚â§_; z‚â§n)
open import Data.Nat.Properties      using (‚â§-refl; ‚â§-trans; +-identity ≥;
  module ‚â§-Reasoning; m‚â§n‚äîm; +-mono ≥-‚â§; m‚â§m‚äîn; +-comm; _‚â§?_)
open import Data.Product.Base as Prod using (_√ó_; _,_; uncurry; proj‚ÇÅ; proj‚ÇÇ)
import Data.Product.Relation.Unary.All as All·¥æ

open import Data.Tree.Binary as Tree using (Tree; leaf; node; #nodes; map‚Çô)
open import Data.Tree.Binary.Relation.Unary.All as All·µÄ using (leaf; node)
open import Data.Unit.Base using (‚ä§; tt)
import Data.Tree.Binary.Relation.Unary.All.Properties as All·µÄ
import Data.Tree.Binary.Properties as Tree

open import Data.Maybe.Base as Maybe using (Maybe; nothing; just; maybe‚Ä≤)
open import Data.Maybe.Relation.Unary.All as All·¥π using (nothing; just)

open import Data.String.Base as String
  using (String; length; replicate; _++_; unlines)
import Data.String.Unsafe as String
open import Function.Base using (_‚àò_; flip; _on_; id; _‚àò‚Ä≤_; _$_)
open import Relation.Nullary.Decidable.Core using (Dec)
open import Relation.Unary using (IUniversal; _‚áí_; U)
open import Relation.Binary.PropositionalEquality.Core
  using (_‚â°_; refl; sym; cong; cong‚ÇÇ; subst)
open import Relation.Binary.PropositionalEquality.Properties
  using (module ‚â°-Reasoning)

open import Data.Refinement using (Refinement-syntax; _,_; value; proof)
import Data.Refinement.Relation.Unary.All as All·¥ø
-}

------------------------------------------------------------------------
-- Block of text

-- Content is a representation of the first line and the middle of the
-- block. We use a tree rather than a list for the middle of the block
-- so that we can extend it with lines on the left and on the line for
-- free. We will ultimately render the block by traversing the tree left
-- to right in a depth-first manner.

TreeStr : ùí∞
TreeStr = Tree String ‚ä§

Content : ùí∞
Content = Maybe (String √ó TreeStr)

sizeC : Content ‚Üí ‚Ñï
sizeC = Maybe.rec 0 (suc ‚àò #nodes ‚àò snd)

AllC : ‚àÄ {‚Ñì} (P : String ‚Üí ùí∞ ‚Ñì) ‚Üí (Content ‚Üí ùí∞ ‚Ñì)
AllC P c = All·¥π.All (Œª st ‚Üí P (st .fst) √ó All·µÄ.All P (Œª _ ‚Üí ‚ä§) (st .snd)) c

All‚â§ : ‚Ñï ‚Üí Content ‚Üí ùí∞
All‚â§ n = AllC (Œª s ‚Üí length‚Çõ s ‚â§ n)

record Block : ùí∞ where
  field
    height    : ‚Ñï
    block     : [ xs Íûâ Content ‚à£ sizeC xs Ôºù height ]‚ÇÄ
  -- last line
    lastWidth : ‚Ñï
    lastL     : [ s Íûâ String ‚à£ length‚Çõ s Ôºù lastWidth ]‚ÇÄ
  -- max of all the widths
    maxWidth  : [ n Íûâ ‚Ñï ‚à£ (lastWidth ‚â§ n) √ó All‚â§ n (block .value) ]‚ÇÄ

------------------------------------------------------------------------
-- Raw string

text : String ‚Üí Block
text s = record
  { height    = 0
  ; block     = nothing ,‚ÇÄ refl
  ; lastWidth = width
  ; lastL     = s ,‚ÇÄ refl
  ; maxWidth  = width ,‚ÇÄ (refl , nothing)
  } where width = length‚Çõ s

------------------------------------------------------------------------
-- Empty

empty : Block
empty = text ""

------------------------------------------------------------------------
-- Helper functions

node? : Content ‚Üí String ‚Üí TreeStr ‚Üí Content
node? (just (x , xs)) y ys = just (x , node xs y ys)
node? nothing         y ys = just (y , ys)

‚à£node?‚à£ : ‚àÄ b y ys
        ‚Üí sizeC (node? b y ys) Ôºù sizeC b + suc (#nodes ys)
‚à£node?‚à£ (just (x , xs)) y ys = refl
‚à£node?‚à£ nothing         y ys = refl

‚â§-Content : ‚àÄ {m n} {b : Content} ‚Üí m ‚â§ n ‚Üí All‚â§ m b ‚Üí All‚â§ n b
‚â§-Content {m} {n} m‚â§n =
  All·¥π.all-map Œª where
                  (le , a) ‚Üí (le ‚àô m‚â§n) , all-map‚Çô (_‚àô m‚â§n) a

All‚â§-node? : ‚àÄ {l m r n}
           ‚Üí All‚â§ n l ‚Üí length‚Çõ m ‚â§ n
           ‚Üí All·µÄ.All (Œª s ‚Üí length‚Çõ s ‚â§ n) (Œª _ ‚Üí ‚ä§) r
           ‚Üí All‚â§ n (node? l m r)
All‚â§-node?  nothing          py pys = just (py , pys)
All‚â§-node? (just (px , pxs)) py pys = just (px , node pxs py pys)

------------------------------------------------------------------------
-- Appending two documents

private
  module append (x y : Block) where

    module x = Block x
    module y = Block y

    blockx = x.block .value
    blocky = y.block .value

    widthx = x.maxWidth .value
    widthy = y.maxWidth .value

    lastx = x.lastL .value
    lasty = y.lastL .value

    height : ‚Ñï
    height = x.height + y.height

    lastWidth : ‚Ñï
    lastWidth = x.lastWidth + y.lastWidth

    pad : Maybe String
    pad =
      let l = x.lastWidth in
      if is-zero? l
        then nothing
        else just (list‚Üístring (replicate l ' '))

    size-pad : Maybe.rec 0 length‚Çõ pad Ôºù x.lastWidth
    size-pad with x.lastWidth
    ... | zero  = refl
    ... | suc n =   ap length (list‚Üístring‚Üílist {xs = _ ‚à∑ _})
                  ‚àô ap suc length-replicate

    indent : Maybe String ‚Üí String ‚Üí String
    indent = Maybe.rec id _++‚Çõ_

    size-indent : ‚àÄ ma str
                ‚Üí length‚Çõ (indent ma str) Ôºù Maybe.rec 0 length‚Çõ ma + length‚Çõ str
    size-indent (just pad) str = length‚Çõ-++‚Çõ {s‚ÇÅ = pad}
    size-indent  nothing   str = refl

    indents : Maybe String ‚Üí TreeStr ‚Üí TreeStr
    indents = Maybe.rec id (map‚Çô ‚àò _++‚Çõ_)

    size-indents : ‚àÄ ma t ‚Üí #nodes (indents ma t) Ôºù #nodes t
    size-indents (just pad) t = #nodes-map‚Çô (pad ++‚Çõ_) t
    size-indents  nothing   t = refl
    
    unfold-indents : ‚àÄ ma t ‚Üí indents ma t Ôºù map‚Çô (indent ma) t
    unfold-indents (just x) t = refl
    unfold-indents  nothing t = map-id t ‚Åª¬π

    vContent : Content √ó String
    vContent =
      Maybe.rec
        (blockx , lastx ++‚Çõ lasty)
        (Œª where (hd , tl) ‚Üí node?
                    {-,--------------,-}
                    {-|-} blockx   {-|-}
                    {-|-}          {-'---,-}     {-,------------------,-}
                    {-|-} (lastx       {-|-} ++‚Çõ {-|-}  hd)         {-|-}
                    {-'------------------'-}     {-|-}              {-|-}
                    (indents pad                 {-|-}  tl)    {-,----'-}
                    , indent pad                 {-|-} lasty   {-|-}
                                                 {-'-------------'-})
        blocky

    vBlock = fst vContent
    vLast  = snd vContent

    isBlock : sizeC blockx Ôºù x.height
            ‚Üí sizeC blocky Ôºù y.height
            ‚Üí sizeC vBlock Ôºù height
    isBlock sx sy with blocky
    ... | just (hd , tl) =
              ‚à£node?‚à£ blockx _ _
             ‚àô ap¬≤ _+_ sx (ap suc (size-indents pad _) ‚àô sy)
    ... | nothing = sx ‚àô +-zero-r _ ‚Åª¬π
                       ‚àô ap (x.height +_) sy

    block : [ xs Íûâ Content ‚à£ sizeC xs Ôºù height ]‚ÇÄ
    block .value = vBlock
    block .proof = isBlock (x.block .proof) (y.block .proof)

    isLastLine : length‚Çõ lastx Ôºù x.lastWidth
               ‚Üí length‚Çõ lasty Ôºù y.lastWidth
               ‚Üí length‚Çõ vLast Ôºù lastWidth
    isLastLine sx sy with blocky
    ... | just (hd , tl) =   size-indent pad lasty
                           ‚àô ap¬≤ _+_ size-pad sy
    ... | nothing        =   length‚Çõ-++‚Çõ {s‚ÇÅ = lastx}
                           ‚àô ap¬≤ _+_ sx sy

    lastL : [ s Íûâ String ‚à£ length‚Çõ s Ôºù lastWidth ]‚ÇÄ
    lastL .value = vLast
    lastL .proof = isLastLine (x.lastL .proof) (y.lastL .proof)

    vMaxWidth : ‚Ñï
    vMaxWidth = max widthx (x.lastWidth + widthy)

    isMaxWidth‚ÇÅ : y.lastWidth ‚â§ widthy ‚Üí lastWidth ‚â§ vMaxWidth
    isMaxWidth‚ÇÅ p = ‚â§-+ refl p ‚àô r‚â§‚à™ {x = widthx}

    isMaxWidth‚ÇÇ : length‚Çõ lastx Ôºù x.lastWidth
                ‚Üí x.lastWidth ‚â§ widthx
                ‚Üí All‚â§ widthx blockx
                ‚Üí All‚â§ widthy blocky
                ‚Üí All‚â§ vMaxWidth vBlock
    isMaxWidth‚ÇÇ xe xle sx sy with blocky
    isMaxWidth‚ÇÇ xe xle sx sy | nothing        = ‚â§-Content l‚â§‚à™ sx
    isMaxWidth‚ÇÇ xe xle sx (just (shd , stl)) | just (hd , tl) =
      All‚â§-node? (‚â§-Content l‚â§‚à™ sx)
                 middle
                 (subst (All·µÄ.All _ (Œª _ ‚Üí ‚ä§)) (unfold-indents pad tl ‚Åª¬π) $
                  map‚Çô‚Å∫ (indent pad) $
                  all-map‚Çô (Œª {n} ‚Üí indented n) stl)
      where
      middle : length‚Çõ (lastx ++‚Çõ hd) ‚â§ vMaxWidth
      middle =   =‚Üí‚â§ (length‚Çõ-++‚Çõ {s‚ÇÅ = lastx} {s‚ÇÇ = hd})
               ‚àô ‚â§-+ (=‚Üí‚â§ xe) shd 
               ‚àô r‚â§‚à™ {x = widthx}

      indented : ‚àÄ s
               ‚Üí length‚Çõ s ‚â§ widthy
               ‚Üí length‚Çõ (indent pad s) ‚â§ vMaxWidth
      indented s ss =   =‚Üí‚â§ (size-indent pad s)
                      ‚àô ‚â§-+ (=‚Üí‚â§ size-pad) ss 
                      ‚àô r‚â§‚à™ {x = widthx}

    maxWidth : [ n Íûâ ‚Ñï ‚à£ (lastWidth ‚â§ n) √ó All‚â§ n vBlock ]‚ÇÄ
    maxWidth .value = vMaxWidth
    maxWidth .proof =   isMaxWidth‚ÇÅ (y.maxWidth .proof .fst)
                      , isMaxWidth‚ÇÇ (x.lastL .proof)
                                    (x.maxWidth .proof .fst)
                                    (x.maxWidth .proof .snd)
                                    (y.maxWidth .proof .snd)
 
infixl 4 _‚óÜ_
_‚óÜ_ : Block ‚Üí Block ‚Üí Block
x ‚óÜ y = record { append x y }

------------------------------------------------------------------------
-- Flush (introduces a new line)

private
  module flush (x : Block) where

    module x = Block x
    blockx  = x.block .value
    lastx   = x.lastL .value
    widthx  = x.maxWidth .value
    heightx = x.height

    height    = suc heightx
    lastWidth = 0
    vMaxWidth = widthx

    lastL : [ s Íûâ String ‚à£ length‚Çõ s Ôºù lastWidth ]‚ÇÄ
    lastL = "" ,‚ÇÄ refl

    vContent = node? blockx lastx (leaf tt)

    isBlock : sizeC blockx Ôºù heightx ‚Üí sizeC vContent Ôºù height
    isBlock sx = ‚à£node?‚à£ blockx lastx (leaf tt) ‚àô +-comm (sizeC blockx) 1 ‚àô ap suc sx 

    block : [ xs Íûâ Content ‚à£ sizeC xs Ôºù height ]‚ÇÄ
    block .value = vContent
    block .proof = isBlock (x.block .proof)

    maxWidth : [ n Íûâ ‚Ñï ‚à£ (lastWidth ‚â§ n) √ó All‚â§ n vContent ]‚ÇÄ
    maxWidth .value = widthx
    maxWidth .proof =
      z‚â§ , All‚â§-node? (x.maxWidth .proof .snd)
                      (=‚Üí‚â§ (x.lastL .proof) ‚àô x.maxWidth .proof .fst)
                      (leaf tt)

flush : Block ‚Üí Block
flush x = record { flush x }

------------------------------------------------------------------------
-- Other functions

render : Block ‚Üí String
render x = lines
  $ Maybe.rec [] ((Œª hd tl ‚Üí hd ‚à∑ to-infix tl) $¬≤_) 
  $ node? (x .Block.block .value) (x .Block.lastL .value) (leaf tt)

valid? : ‚Ñï ‚Üí Block ‚Üí Bool
valid? width b = Block.maxWidth b .value ‚â§? width
