{-# OPTIONS --safe #-}
module Data.Tree.Binary.NL.All where

open import Meta.Prelude
open Variadics _

open import Data.Tree.Binary.NL

data All {โโฟ โหก โแต โ๐ฅ} {N : ๐ฐ โโฟ} {L : ๐ฐ โหก}
         (P : Pred N โแต) (Q : Pred L โ๐ฅ)
       : Tree N L โ ๐ฐ (โโฟ โ โหก โ โแต โ โ๐ฅ) where
  leaf : โ {x} โ Q x โ All P Q (leaf x)
  node : โ {l m r} โ All P Q l โ P m โ All P Q r โ All P Q (node l m r)

private
  variable
    โโฟ โหก โp โq โr โs โ โโฒ : Level
    N : ๐ฐ โโฟ
    L : ๐ฐ โหก
    A : ๐ฐ โ
    B : ๐ฐ โโฒ
    P : Pred N โp
    Q : Pred L โq
    R : Pred N โr
    S : Pred L โs

-- TODO variadics fail
all-map : (โ {n} โ P n โ R n) โ (โ {l} โ Q l โ S l) โ โ[ All P Q โ All R S ]
all-map f g (leaf x)     = leaf (g x)
all-map f g (node l m r) = node (all-map f g l) (f m) (all-map f g r)

all-mapโ : (โ {n} โ P n โ R n) โ โ[ All P Q โ All R Q ]
all-mapโ {Q = Q} f = all-map f id

all-mapโ : (โ {l} โ Q l โ S l) โ โ[ All P Q โ All P S ]
all-mapโ {P = P} f = all-map id f

mapโบ : (f : N โ A) โ (g : L โ B)
     โ โ {t} โ All (P โ f) (Q โ g) t โ All P Q (map f g t)
mapโบ f g (leaf x)     = leaf x
mapโบ f g (node l m r) = node (mapโบ f g l) m (mapโบ f g r)

mapโโบ : โ (f : N โ A) {t}
      โ All (P โ f) Q t โ All P Q (mapโ f t)
mapโโบ f = mapโบ f id

mapโโบ : โ (g : L โ B) {t}
      โ All P (Q โ g) t โ All P Q (mapโ g t)
mapโโบ g = mapโบ id g

